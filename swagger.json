{
  "swagger" : "2.0",
  "info" : {
    "description" : "This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.",
    "version" : "1.0.0",
    "title" : "ProcessMaker API",
    "termsOfService" : "http://processmaker.com/terms/",
    "contact" : {
      "name" : "ProcessMaker API Team",
      "url" : "https://www.processmaker.io/",
      "email" : "support@processmaker.io"
    }
  },
  "host" : "CHANGEME.api.processmaker.io",
  "basePath" : "/api/v1",
  "schemes" : [ "https" ],
  "consumes" : [ "application/vnd.api+json" ],
  "produces" : [ "application/vnd.api+json" ],
  "paths" : {
    "/groups" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves all existing groups.",
        "operationId" : "findGroups",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per Page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of groups retrived",
            "schema" : {
              "$ref" : "#/definitions/GroupCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new group.",
        "operationId" : "addGroup",
        "parameters" : [ {
          "in" : "body",
          "name" : "GroupCreateItem",
          "description" : "JSON API with the Group object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupCreateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Group created",
            "schema" : {
              "$ref" : "#/definitions/GroupItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/groups/{id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves a group using its ID.",
        "operationId" : "findGroupById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of group to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Group retrieved",
            "schema" : {
              "$ref" : "#/definitions/GroupItem"
            }
          },
          "404" : {
            "description" : "Group not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing group.",
        "operationId" : "updateGroup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of group to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "GroupUpdateItem",
          "description" : "Group object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Group updated",
            "schema" : {
              "$ref" : "#/definitions/GroupItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes a group using the group ID",
        "operationId" : "deleteGroup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of group to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Group successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/groups/{id}/users" : {
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method synchronizes one or more users with a group.",
        "operationId" : "syncUsersToGroup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of group to be modifieded",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "GroupSyncUsersItem",
          "description" : "JSON API with array of users IDs to sync",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupSyncUsersItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User(s) synced to group",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "500" : {
            "description" : "Error adding group(s)",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method adds one or more new users to a group.",
        "operationId" : "addUsersToGroup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of group to be modified",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "GroupAddUsersItem",
          "description" : "JSON API response with array of users ID's",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupAddUsersItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "JSON API result details",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Error adding group(s)",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method removes one or more users from a group.",
        "operationId" : "removeUsersFromGroup",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of group to be modified",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "GroupRemoveUsersItem",
          "description" : "JSON API response with Users IDs to remove",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupRemoveUsersItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User(s) removed from group",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Error adding group(s)",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves all existing processes.",
        "operationId" : "findProcesses",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of processes retrieved",
            "schema" : {
              "$ref" : "#/definitions/ProcessCollection"
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "403" : {
            "description" : "Forbidden access",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new process",
        "operationId" : "addProcess",
        "parameters" : [ {
          "in" : "body",
          "name" : "ProcessCreateItem",
          "description" : "JSON API response with the Process object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProcessCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "New process created",
            "schema" : {
              "$ref" : "#/definitions/ProcessItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/import" : {
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method imports BPMN files. A new process is created when import is successful.",
        "operationId" : "importBpmnFile",
        "parameters" : [ {
          "in" : "body",
          "name" : "bpmnImportItem",
          "description" : "JSON API with the BPMN file to import",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/bpmnImportItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "File imported and process instance created successfully",
            "schema" : {
              "$ref" : "#/definitions/ProcessCollection_1"
            }
          },
          "403" : {
            "description" : "Access forbidden",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves a process using its ID",
        "operationId" : "findProcessById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of process to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Process retrieved",
            "schema" : {
              "$ref" : "#/definitions/ProcessItem"
            }
          },
          "404" : {
            "description" : "Process not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing process.",
        "operationId" : "updateProcess",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of process to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ProcessUpdateItem",
          "description" : "Process object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProcessUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Process updated",
            "schema" : {
              "$ref" : "#/definitions/ProcessItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes a process using the process ID.",
        "operationId" : "deleteProcess",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Process ID to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method returns all events related to the runned process",
        "operationId" : "findEvents",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process related to the event",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page numbers to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per Page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of events retrieved",
            "schema" : {
              "$ref" : "#/definitions/EventCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates the new event.",
        "operationId" : "addEvent",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of the process related to the event",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "EventCreateItem",
          "description" : "JSON API response with the Event object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Event response",
            "schema" : {
              "$ref" : "#/definitions/EventItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events/{event_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves an event using its ID.",
        "operationId" : "findEventById",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of event to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event retrieved",
            "schema" : {
              "$ref" : "#/definitions/EventItem"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing event",
        "operationId" : "updateEvent",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of event to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "EventUpdateItem",
          "description" : "Event object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event updated",
            "schema" : {
              "$ref" : "#/definitions/EventItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes an event using the event ID and process ID",
        "operationId" : "deleteEvent",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of event to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events/{event_id}/connectors" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method returns all Event connectors related to the run Process and Event.",
        "operationId" : "findEventConnectors",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of Task to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per Page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "Event connectors list",
            "schema" : {
              "$ref" : "#/definitions/EventConnectorsCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is intended for creating a new Event connector.",
        "operationId" : "addEventConnector",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of Event to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "EventConnectorCreateItem",
          "description" : "JSON API with the EventConnector object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventConnectorCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created Event connector response",
            "schema" : {
              "$ref" : "#/definitions/EventConnector_1"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events/{event_id}/connectors/{connector_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method returns all Event connectors related to the run Process and Event.",
        "operationId" : "findEventConnectorById",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of Event to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connector_id",
          "in" : "path",
          "description" : "ID of EventConnector to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event Connector Item response",
            "schema" : {
              "$ref" : "#/definitions/EventConnector_1"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method lets update the existing Event connector with new parameters values",
        "operationId" : "updateEventConnector",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of Event to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connector_id",
          "in" : "path",
          "description" : "ID of Event Connector to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "EventConnectorUpdateItem",
          "description" : "EventConnector object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventConnectorUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "JSON API response with updated EventConnector object",
            "schema" : {
              "$ref" : "#/definitions/EventConnector_1"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.",
        "operationId" : "deleteEventConnector",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of of Process item",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of item to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connector_id",
          "in" : "path",
          "description" : "ID of EventConnector to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events/{event_id}/trigger" : {
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method starts/triggers an event.",
        "operationId" : "EventTrigger",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to the event",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "event_id",
          "in" : "path",
          "description" : "ID of event to trigger",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TriggerEventCreateItem",
          "description" : "Json with some parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TriggerEventCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Event started",
            "schema" : {
              "$ref" : "#/definitions/DataModelItem_1"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/flows" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves all existing flows.",
        "operationId" : "findFlows",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process related to the flow",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page numbers to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per Page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of flows retrieved",
            "schema" : {
              "$ref" : "#/definitions/FlowCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new Sequence flow",
        "operationId" : "addFlow",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of the process related to the flow",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "FlowCreateItem",
          "description" : "JSON API response with the Flow object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FlowCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The Sequence Flow was created",
            "schema" : {
              "$ref" : "#/definitions/FlowItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/flows/{flow_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves a flow based on its ID.",
        "operationId" : "findFlowById",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flow_id",
          "in" : "path",
          "description" : "ID of flow to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Flow retrieved",
            "schema" : {
              "$ref" : "#/definitions/FlowItem"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing flow.",
        "operationId" : "updateFlow",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flow_id",
          "in" : "path",
          "description" : "ID of flow to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "FlowUpdateItem",
          "description" : "Flow object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FlowUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Flow updated",
            "schema" : {
              "$ref" : "#/definitions/FlowItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes a sequence flow using the flow ID and process ID.",
        "operationId" : "deleteFlow",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flow_id",
          "in" : "path",
          "description" : "ID of flow to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/gateways" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves all existing gateways.",
        "operationId" : "findGateways",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process related to the gateway",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "Gateways list",
            "schema" : {
              "$ref" : "#/definitions/GatewayCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new gateway.",
        "operationId" : "addGateway",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of the process related to the gateway",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "GatewayCreateItem",
          "description" : "JSON API response with the gateway object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GatewayCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Gateway created",
            "schema" : {
              "$ref" : "#/definitions/GatewayItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/gateways/{gateway_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves a gateway based on its ID.",
        "operationId" : "findGatewayById",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "gateway_id",
          "in" : "path",
          "description" : "ID of gateway to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Gateway retrieved",
            "schema" : {
              "$ref" : "#/definitions/GatewayItem"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing gateway.",
        "operationId" : "updateGateway",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "gateway_id",
          "in" : "path",
          "description" : "ID of gateway to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "GatewayUpdateItem",
          "description" : "Gateway object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GatewayUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Gateway updated",
            "schema" : {
              "$ref" : "#/definitions/GatewayItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is deletes a single item using the gateway ID and process ID.",
        "operationId" : "deleteGateway",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "gateway_id",
          "in" : "path",
          "description" : "ID of Process to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/instances" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves related to the process using  the Process ID",
        "operationId" : "findInstances",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to the instances",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of instances retrieved",
            "schema" : {
              "$ref" : "#/definitions/InstanceCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new instance.",
        "operationId" : "addInstance",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to the nstance",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "InstanceCreateItem",
          "description" : "JSON API response with the Instance object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InstanceCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Instance created",
            "schema" : {
              "$ref" : "#/definitions/InstanceItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/instances/{instance_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves an instance using its ID.",
        "operationId" : "findInstanceById",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance_id",
          "in" : "path",
          "description" : "ID of instance to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Instance retrieved",
            "schema" : {
              "$ref" : "#/definitions/InstanceItem"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates  an existing instance.",
        "operationId" : "updateInstance",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance_id",
          "in" : "path",
          "description" : "ID of Instance to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "InstanceUpdateItem",
          "description" : "Instance object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InstanceUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Instance updated",
            "schema" : {
              "$ref" : "#/definitions/InstanceItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes an instance using the instance ID and process ID.",
        "operationId" : "deleteInstance",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance_id",
          "in" : "path",
          "description" : "ID of instance to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Instance successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/instances/{instance_id}/datamodel" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method returns the instance DataModel and lets the user work with it directly",
        "operationId" : "findDataModel",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance_id",
          "in" : "path",
          "description" : "ID of instance to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per Page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "DataModel retrived",
            "schema" : {
              "$ref" : "#/definitions/DataModelItem_1"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is intended for returning a list of all Tasks related to the process",
        "operationId" : "findTasks",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process relative to task",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per Page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "Tasks list",
            "schema" : {
              "$ref" : "#/definitions/TaskCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new task.",
        "operationId" : "addTask",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to the task",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TaskCreateItem",
          "description" : "JSON API with the Task object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Task created",
            "schema" : {
              "$ref" : "#/definitions/TaskItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is retrieves a task using its ID.",
        "operationId" : "findTaskById",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of process to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of task to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Task retrieved",
            "schema" : {
              "$ref" : "#/definitions/TaskItem"
            }
          },
          "404" : {
            "description" : "Task not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is intended for updating an existing task.",
        "operationId" : "updateTask",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of Task to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TaskUpdateItem",
          "description" : "Task object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "JSON API response with updated Task object",
            "schema" : {
              "$ref" : "#/definitions/TaskItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes a task using the task ID and process ID.",
        "operationId" : "deleteTask",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of task to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}/connectors" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method returns all Task connectors related to the run Process and Task.",
        "operationId" : "findTaskConnectors",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of Task to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per Page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "Task connectors list",
            "schema" : {
              "$ref" : "#/definitions/TaskConnectorsCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is intended for creating a new task connector.",
        "operationId" : "addTaskConnector",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of Task to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TaskConnectorCreateItem",
          "description" : "JSON API with the TaskConnector object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskConnectorCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created Task connector response",
            "schema" : {
              "$ref" : "#/definitions/TaskConnector_1"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is intended for retrieving an Task connector based on it's ID.",
        "operationId" : "findTaskConnectorById",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of Task to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connector_id",
          "in" : "path",
          "description" : "ID of TaskConnector to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Task Connector Item response",
            "schema" : {
              "$ref" : "#/definitions/TaskConnector_1"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method lets update the existing Task connector with new parameters values",
        "operationId" : "updateTaskConnector",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of Task to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connector_id",
          "in" : "path",
          "description" : "ID of Task Connector to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TaskConnectorUpdateItem",
          "description" : "TaskConnector object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskConnectorUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "JSON API response with updated TaskConnector object",
            "schema" : {
              "$ref" : "#/definitions/TaskConnector_1"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.",
        "operationId" : "deleteTaskConnector",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "ID of Process item to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of Task item to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connector_id",
          "in" : "path",
          "description" : "ID of TaskConnector to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}/groups" : {
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method synchronizes a one or more groups with a task.",
        "operationId" : "syncGroupsToTask",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of task to modify",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TaskSyncGroupsItem",
          "description" : "JSON API response with groups IDs to sync",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskSyncGroupsItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "JSON API response with result details",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Group(s) not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Error syncing Group(s)",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method assigns group(s) to the choosen task",
        "operationId" : "addGroupsToTask",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "ID of task to be modified",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TaskAddGroupsItem",
          "description" : "JSON API with Groups ID's to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskAddGroupsItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Group(s) was assigned to the task",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Group(s) not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Unknown error while adding Group(s) to the task",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method removes groups from a task",
        "operationId" : "removeGroupsFromTask",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "Task ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TaskRemoveGroupsItem",
          "description" : "JSON API response with Groups IDs to remove",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskRemoveGroupsItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Groups removed from task",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Group(s) not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "422" : {
            "description" : "Unprocessable entity",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Error removing group(s)",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}/inputoutput" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves all existing Input/Output objects in the related task instance.",
        "operationId" : "findInputOutputs",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "Task instance ID related to Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Input/Outputs retrieved",
            "schema" : {
              "$ref" : "#/definitions/InputOutputCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new Input/Output object",
        "operationId" : "addInputOutput",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "Task instance ID related to Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "InputOutputCreateItem",
          "description" : "Create and add a new Input/Output object with JSON API",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InputOutputCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The InputOutput object was created",
            "schema" : {
              "$ref" : "#/definitions/InputOutputItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves an Input/Output object using its ID.",
        "operationId" : "findInputOutputById",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to the Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "Task instance ID related to the Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "inputoutput_uid",
          "in" : "path",
          "description" : "ID of Input/Output to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Input/Output object retrieved",
            "schema" : {
              "$ref" : "#/definitions/InputOutputItem"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing Input/Output object.",
        "operationId" : "updateInputOutput",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to the Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "Task instance ID related to the Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "inputoutput_uid",
          "in" : "path",
          "description" : "ID of Input/Output to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "InputOutputUpdateItem",
          "description" : "Input/Output object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InputOutputUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Input/Output object updated",
            "schema" : {
              "$ref" : "#/definitions/InputOutputItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.",
        "operationId" : "deleteInputOutput",
        "parameters" : [ {
          "name" : "process_id",
          "in" : "path",
          "description" : "Process ID related to the Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "Task instance ID related to Input/Output object",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "inputoutput_uid",
          "in" : "path",
          "description" : "Input/Output ID to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/task_instances" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves all existing task instances",
        "operationId" : "findTaskInstances",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of task instances retrieved",
            "schema" : {
              "$ref" : "#/definitions/TaskInstanceCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/task_instances/{task_instance_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves a task instance based on its ID.",
        "operationId" : "findTaskInstanceById",
        "parameters" : [ {
          "name" : "task_instance_id",
          "in" : "path",
          "description" : "ID of task instance to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "Task Instance retrieved",
            "schema" : {
              "$ref" : "#/definitions/inline_response_200"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing task instance.",
        "operationId" : "updateTaskInstance",
        "parameters" : [ {
          "name" : "task_instance_id",
          "in" : "path",
          "description" : "ID of task instance to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "TaskInstanceUpdateItem",
          "description" : "Task Instance object to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskInstanceUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Task instance updated",
            "schema" : {
              "$ref" : "#/definitions/inline_response_200"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method returs all existing users in the system.",
        "operationId" : "findUsers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of users retrieved",
            "schema" : {
              "$ref" : "#/definitions/UserCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new user in the system.",
        "operationId" : "addUser",
        "parameters" : [ {
          "in" : "body",
          "name" : "UserCreateItem",
          "description" : "JSON API with the User object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserCreateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "New user created",
            "schema" : {
              "$ref" : "#/definitions/UserItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users/myself" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method returns user information using a token",
        "operationId" : "myselfUser",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Page number to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "User information retrieved",
            "schema" : {
              "$ref" : "#/definitions/UserItem"
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users/{id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method returns a user using its ID.",
        "operationId" : "findUserById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the user to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "User retrieved",
            "schema" : {
              "$ref" : "#/definitions/UserItem"
            }
          },
          "404" : {
            "description" : "User not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of user to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "UserUpdateItem",
          "description" : "User object for update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User updated",
            "schema" : {
              "$ref" : "#/definitions/UserItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes a user from the system.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of user to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "User was successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "User not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "The server encountered an unexpected condition when deleting the user",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users/{user_id}/clients" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method retrieves all existing clients belonging to an user.",
        "operationId" : "findClients",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "User ID related to the clients",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pagefindProcessById",
          "in" : "query",
          "description" : "Page numbers to fetch",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "per_page",
          "in" : "query",
          "description" : "Amount of items per page",
          "required" : false,
          "type" : "integer",
          "default" : 15
        } ],
        "responses" : {
          "200" : {
            "description" : "List of clients retrieved",
            "schema" : {
              "$ref" : "#/definitions/ClientCollection"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "processmaker" ],
        "description" : "This method creates a new Oauth client for the user",
        "operationId" : "addClient",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "ID of the user related to the Oauth client",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ClientCreateItem",
          "description" : "JSON API with the Oauth Client object to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClientCreateItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The client was created",
            "schema" : {
              "$ref" : "#/definitions/ClientItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users/{user_id}/clients/{client_id}" : {
      "get" : {
        "tags" : [ "processmaker" ],
        "description" : "This method is retrieves an Oauth client based on its ID.",
        "operationId" : "findClientById",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "ID of user to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "client_id",
          "in" : "path",
          "description" : "ID of client to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Client retrieved",
            "schema" : {
              "$ref" : "#/definitions/ClientItem"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "processmaker" ],
        "description" : "This method updates an existing Oauth client.",
        "operationId" : "updateClient",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "ID of user to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "client_id",
          "in" : "path",
          "description" : "ID of client to retrieve",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "ClientUpdateItem",
          "description" : "Client object to edit",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClientUpdateItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Client updated",
            "schema" : {
              "$ref" : "#/definitions/ClientItem"
            }
          },
          "400" : {
            "description" : "Invalid parameters",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "processmaker" ],
        "description" : "This method deletes an Oauth client using the client and user IDs.",
        "operationId" : "deleteClient",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "client_id",
          "in" : "path",
          "description" : "ID of client to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Item was successfully deleted",
            "schema" : {
              "$ref" : "#/definitions/ResultSuccess"
            }
          },
          "404" : {
            "description" : "Item not found",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "500" : {
            "description" : "Deletion error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/errorArray"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "PasswordGrant" : {
      "type" : "oauth2",
      "authorizationUrl" : "/oauth/access_token",
      "flow" : "password"
    }
  },
  "definitions" : {
    "TaskConnector" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "task_connector",
          "default" : "task_connector"
        },
        "attributes" : {
          "$ref" : "#/definitions/TaskConnector_attributes"
        }
      }
    },
    "EventConnector" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "event_connector",
          "default" : "event_connector"
        },
        "attributes" : {
          "$ref" : "#/definitions/EventConnector_attributes"
        }
      }
    },
    "Client" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "example" : 1
        },
        "type" : {
          "type" : "string",
          "example" : "client",
          "default" : "client"
        },
        "attributes" : {
          "$ref" : "#/definitions/Client_attributes"
        }
      }
    },
    "InputOutput" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "input_output",
          "default" : "input_output"
        },
        "attributes" : {
          "$ref" : "#/definitions/InputOutput_attributes"
        }
      }
    },
    "BpmnFile" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "process",
          "default" : "process"
        },
        "attributes" : {
          "$ref" : "#/definitions/BpmnFile_attributes"
        }
      }
    },
    "TaskInstance" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "task_instance",
          "default" : "task_instance"
        },
        "attributes" : {
          "$ref" : "#/definitions/TaskInstance_attributes"
        }
      }
    },
    "DataModelItem" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "data_model",
          "default" : "data_model"
        },
        "attributes" : {
          "$ref" : "#/definitions/DataModelItem_attributes"
        }
      }
    },
    "DataModel" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "data_model",
          "default" : "data_model"
        },
        "attributes" : {
          "$ref" : "#/definitions/DataModel_attributes"
        }
      }
    },
    "Instance" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "instance",
          "default" : "instance"
        },
        "attributes" : {
          "$ref" : "#/definitions/Instance_attributes"
        }
      }
    },
    "Flow" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "flow",
          "default" : "flow"
        },
        "attributes" : {
          "$ref" : "#/definitions/Flow_attributes"
        }
      }
    },
    "Gateway" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "gateway",
          "default" : "gateway"
        },
        "attributes" : {
          "$ref" : "#/definitions/Gateway_attributes"
        }
      }
    },
    "Event" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "event",
          "default" : "event"
        },
        "attributes" : {
          "$ref" : "#/definitions/Event_attributes"
        }
      }
    },
    "Task" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "task",
          "default" : "task"
        },
        "attributes" : {
          "$ref" : "#/definitions/Task_attributes"
        }
      }
    },
    "Process" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "process",
          "default" : "process"
        },
        "attributes" : {
          "$ref" : "#/definitions/Process_attributes"
        }
      }
    },
    "Group" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "group",
          "default" : "group"
        },
        "attributes" : {
          "$ref" : "#/definitions/Group_attributes"
        }
      }
    },
    "UserIds" : {
      "type" : "object",
      "required" : [ "users" ],
      "properties" : {
        "users" : {
          "type" : "array",
          "description" : "User ID's array",
          "items" : {
            "type" : "string",
            "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
          }
        }
      }
    },
    "GroupIds" : {
      "type" : "object",
      "required" : [ "groups" ],
      "properties" : {
        "groups" : {
          "type" : "array",
          "description" : "Group ID's array",
          "items" : {
            "type" : "string",
            "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
          }
        }
      }
    },
    "ResultSuccess" : {
      "type" : "object",
      "properties" : {
        "meta" : {
          "$ref" : "#/definitions/ResultSuccess_meta"
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type" : {
          "type" : "string",
          "example" : "user",
          "default" : "user"
        },
        "attributes" : {
          "$ref" : "#/definitions/User_attributes"
        }
      }
    },
    "Pagination" : {
      "type" : "object",
      "required" : [ "count", "current_page", "per_page", "total", "total_pages" ],
      "properties" : {
        "total" : {
          "type" : "integer",
          "example" : 125
        },
        "count" : {
          "type" : "integer",
          "example" : 25
        },
        "per_page" : {
          "type" : "integer",
          "example" : 25
        },
        "current_page" : {
          "type" : "integer",
          "example" : 2
        },
        "total_pages" : {
          "type" : "integer",
          "example" : 30
        },
        "links" : {
          "$ref" : "#/definitions/Pagination_links"
        }
      }
    },
    "MetaLog" : {
      "type" : "object",
      "required" : [ "import_log" ],
      "properties" : {
        "import_log" : {
          "type" : "string"
        }
      }
    },
    "Meta" : {
      "type" : "object",
      "properties" : {
        "pagination" : {
          "$ref" : "#/definitions/Pagination"
        }
      }
    },
    "errorArray" : {
      "type" : "object",
      "required" : [ "errors" ],
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Error"
          }
        }
      }
    },
    "Error" : {
      "type" : "object",
      "required" : [ "code" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "detail" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "GroupCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with a collection of the groups in an array"
    },
    "GroupCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Group"
        }
      }
    },
    "GroupItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Group"
        }
      }
    },
    "GroupUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Group"
        }
      }
    },
    "GroupAddUsersItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/UserIds"
        }
      }
    },
    "GroupSyncUsersItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/UserIds"
        }
      }
    },
    "GroupRemoveUsersItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/UserIds"
        }
      }
    },
    "ProcessCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Process"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with a collection of the processes in an array"
    },
    "ProcessCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Process"
        }
      }
    },
    "ProcessItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Process"
        }
      }
    },
    "bpmnImportItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/BpmnFile"
        }
      }
    },
    "ProcessCollection_1" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Process"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/MetaLog"
        }
      }
    },
    "ProcessUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Process"
        }
      }
    },
    "EventCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with a collection of the events in an array"
    },
    "EventCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Event"
        }
      }
    },
    "EventItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Event"
        }
      }
    },
    "EventUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Event"
        }
      }
    },
    "EventConnectorsCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EventConnector"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API Response with collection of Items in array"
    },
    "EventConnectorCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/EventConnector"
        }
      }
    },
    "EventConnector_1" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/EventConnector"
        }
      }
    },
    "EventConnectorUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/EventConnector"
        }
      }
    },
    "TriggerEventCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/DataModel"
        }
      }
    },
    "DataModelItem_1" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/DataModelItem"
        }
      }
    },
    "FlowCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Flow"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with a collection of the flow in an array"
    },
    "FlowCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Flow"
        }
      }
    },
    "FlowItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Flow"
        }
      }
    },
    "FlowUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Flow"
        }
      }
    },
    "GatewayCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Gateway"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API Response with collection of Items in array"
    },
    "GatewayCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Gateway"
        }
      }
    },
    "GatewayItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Gateway"
        }
      }
    },
    "GatewayUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Gateway"
        }
      }
    },
    "InstanceCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Instance"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with a collection of the instances in an array"
    },
    "InstanceCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Instance"
        }
      }
    },
    "InstanceItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Instance"
        }
      }
    },
    "InstanceUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Instance"
        }
      }
    },
    "TaskCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Task"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API Response with collection of Items in array"
    },
    "TaskCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Task"
        }
      }
    },
    "TaskItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Task"
        }
      }
    },
    "TaskUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Task"
        }
      }
    },
    "TaskConnectorsCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TaskConnector"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API Response with collection of Items in array"
    },
    "TaskConnectorCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/TaskConnector"
        }
      }
    },
    "TaskConnector_1" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/TaskConnector"
        }
      }
    },
    "TaskConnectorUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/TaskConnector"
        }
      }
    },
    "TaskAddGroupsItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/GroupIds"
        }
      }
    },
    "TaskSyncGroupsItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/GroupIds"
        }
      }
    },
    "TaskRemoveGroupsItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/GroupIds"
        }
      }
    },
    "InputOutputCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InputOutput"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with a collection of the input/outputs in the array"
    },
    "InputOutputCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/InputOutput"
        }
      }
    },
    "InputOutputItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/InputOutput"
        }
      }
    },
    "InputOutputUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/InputOutput"
        }
      }
    },
    "TaskInstanceCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TaskInstance"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with the collection of task instances in an  array"
    },
    "inline_response_200" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/TaskInstance"
        }
      }
    },
    "TaskInstanceUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/TaskInstance"
        }
      }
    },
    "UserCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with the collection of users in an array"
    },
    "UserCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/User"
        }
      }
    },
    "UserItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/User"
        }
      }
    },
    "UserUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/User"
        }
      }
    },
    "ClientCollection" : {
      "properties" : {
        "data" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Client"
          }
        },
        "meta" : {
          "$ref" : "#/definitions/Meta"
        }
      },
      "description" : "JSON API response with a collection of the clients in an array"
    },
    "ClientCreateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Client"
        }
      }
    },
    "ClientItem" : {
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Client"
        }
      }
    },
    "ClientUpdateItem" : {
      "type" : "object",
      "required" : [ "data" ],
      "properties" : {
        "data" : {
          "$ref" : "#/definitions/Client"
        }
      }
    },
    "TaskConnector_attributes" : {
      "properties" : {
        "task_id" : {
          "type" : "integer"
        },
        "connector_class" : {
          "type" : "string",
          "default" : "HttpConnector"
        },
        "input_parameters" : {
          "type" : "string",
          "default" : "[]"
        },
        "output_parameters" : {
          "type" : "string",
          "default" : "[]"
        },
        "async_before" : {
          "type" : "boolean"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "EventConnector_attributes" : {
      "properties" : {
        "event_id" : {
          "type" : "integer"
        },
        "connector_class" : {
          "type" : "string",
          "default" : "CorrelationKeys"
        },
        "input_parameters" : {
          "type" : "string",
          "default" : "[]"
        },
        "output_parameters" : {
          "type" : "string",
          "default" : "[]"
        },
        "async_before" : {
          "type" : "boolean"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "Client_attributes" : {
      "required" : [ "name" ],
      "properties" : {
        "secret" : {
          "type" : "string",
          "example" : "1WfPZS8TepSKgnure5FHUOyvT8340fQH8cz4ISN2"
        },
        "name" : {
          "type" : "string",
          "example" : "Client Name"
        },
        "personal_access_client" : {
          "type" : "boolean"
        },
        "password_client" : {
          "type" : "boolean"
        },
        "revoked" : {
          "type" : "boolean"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "InputOutput_attributes" : {
      "required" : [ "input_parameters", "output_parameters" ],
      "properties" : {
        "input_parameters" : {
          "type" : "object",
          "properties" : { }
        },
        "output_parameters" : {
          "type" : "object",
          "properties" : { }
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "BpmnFile_attributes" : {
      "required" : [ "bpmn" ],
      "properties" : {
        "bpmn" : {
          "type" : "string",
          "example" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>...</xml>"
        }
      }
    },
    "TaskInstance_attributes" : {
      "required" : [ "instance_id", "priority", "status", "task_id" ],
      "properties" : {
        "task_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "instance_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "group_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "user_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "status" : {
          "type" : "string",
          "default" : "INITIAL",
          "enum" : [ "INITIAL", "DELEGATED", "STARTED", "CANCELLED", "FINISHED", "COMPLETE", "PAUSED" ]
        },
        "priority" : {
          "type" : "string",
          "default" : "3",
          "enum" : [ "1", "2", "3", "4", "5" ]
        },
        "delegate_date" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "start_date" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "finish_date" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "task_due_date" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "risk_date" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "duration" : {
          "type" : "integer"
        },
        "instance_overdue_percentage" : {
          "type" : "number",
          "format" : "double"
        },
        "data" : {
          "type" : "string"
        },
        "content" : {
          "type" : "string"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "DataModelItem_attributes" : {
      "required" : [ "content" ],
      "properties" : {
        "content" : {
          "type" : "object",
          "properties" : { }
        }
      }
    },
    "DataModel_attributes" : {
      "required" : [ "content" ],
      "properties" : {
        "content" : {
          "type" : "string",
          "example" : "Some parameters in json format"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "Instance_attributes" : {
      "required" : [ "name", "process_id", "status" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Instance Name"
        },
        "description" : {
          "type" : "string",
          "example" : "Some description"
        },
        "process_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "parent_instance_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b12"
        },
        "init_user_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b14"
        },
        "pin" : {
          "type" : "string"
        },
        "duration" : {
          "type" : "integer"
        },
        "status" : {
          "type" : "string",
          "default" : "RUNNING",
          "enum" : [ "RUNNING", "TODO", "PAUSED", "COMPLETED", "CANCELLED" ]
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "Flow_attributes" : {
      "required" : [ "default", "from_object_id", "from_object_type", "optional", "process_id", "to_object_id", "to_object_type", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Flow name"
        },
        "description" : {
          "type" : "string",
          "example" : "Some description"
        },
        "process_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "from_object_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b25"
        },
        "from_object_type" : {
          "type" : "string",
          "example" : "task"
        },
        "to_object_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b25"
        },
        "to_object_type" : {
          "type" : "string",
          "example" : "event"
        },
        "type" : {
          "type" : "string",
          "default" : "SEQUENTIAL",
          "enum" : [ "SEQUENTIAL", "EVALUATE", "SELECT", "PARALLEL", "PARALLEL-BY-EVALUATION", "SEC-JOIN", "DISCRIMINATOR" ]
        },
        "condition" : {
          "type" : "string"
        },
        "default" : {
          "type" : "boolean",
          "default" : false
        },
        "optional" : {
          "type" : "boolean",
          "default" : false
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "Gateway_attributes" : {
      "required" : [ "process_id", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Gateway Title"
        },
        "description" : {
          "type" : "string",
          "example" : "Some description"
        },
        "process_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "EXCLUSIVE", "INCLUSIVE", "PARALLEL", "EVENT" ]
        },
        "direction" : {
          "type" : "string",
          "enum" : [ "DIVERGENT", "CONVERGENT", "MIXED" ]
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "Event_attributes" : {
      "required" : [ "definition", "name", "process_id", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Event_Title"
        },
        "description" : {
          "type" : "string",
          "example" : "Some description"
        },
        "process_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "message_id" : {
          "type" : "integer"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "START", "END", "INTERMEDIATE_CATCH", "INTERMEDIATE_THROW", "BOUNDARY", "IMPLICIT_THROW" ]
        },
        "definition" : {
          "type" : "string",
          "enum" : [ "NONE", "CANCEL", "COMPENSATION", "ERROR", "ESCALATION", "MESSAGE", "LINK", "SIGNAL", "TERMINATE", "TIMER" ]
        },
        "interrupting" : {
          "type" : "boolean"
        },
        "condition" : {
          "type" : "string"
        },
        "time" : {
          "type" : "string"
        },
        "duration" : {
          "type" : "string"
        },
        "cycle" : {
          "type" : "string"
        },
        "attached_to_task_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "Task_attributes" : {
      "required" : [ "assign_type", "can_upload", "name", "process_id", "selfservice_timeout", "send_last_email", "start", "transfer_fly", "type", "view_additional_documentation", "view_upload" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Task_Title"
        },
        "description" : {
          "type" : "string",
          "example" : "Some description"
        },
        "process_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "type" : {
          "type" : "string",
          "default" : "NORMAL",
          "enum" : [ "NORMAL", "ADHOC", "SUBPROCESS", "HIDDEN", "GATEWAYTOGATEWAY", "WEBENTRYEVENT", "END-MESSAGE-EVENT", "START-MESSAGE-EVENT", "INTERMEDIATE-THROW-MESSAGE-EVENT", "INTERMEDIATE-CATCH-MESSAGE-EVENT", "SCRIPT-TASK", "SERVICE-TASK", "USER-TASK", "START-TIMER-EVENT", "INTERMEDIATE-CATCH-TIMER-EVENT", "END-EMAIL-EVENT", "INTERMEDIATE-THROW-EMAIL-EVENT" ]
        },
        "assign_type" : {
          "type" : "string",
          "default" : "CYCLIC",
          "enum" : [ "CYCLIC", "MANUAL", "EVALUATE", "REPORT_TO", "SELF_SERVICE", "STATIC_MI", "CANCEL_MI", "MULTIPLE_INSTANCE", "MULTIPLE_INSTANCE_VALUE_BASED" ]
        },
        "priority_variable" : {
          "type" : "string"
        },
        "assign_variable" : {
          "type" : "string"
        },
        "group_variable" : {
          "type" : "string"
        },
        "mi_instance_variable" : {
          "type" : "string"
        },
        "mi_complete_variable" : {
          "type" : "string"
        },
        "transfer_fly" : {
          "type" : "boolean",
          "default" : false
        },
        "can_upload" : {
          "type" : "boolean",
          "default" : false
        },
        "view_upload" : {
          "type" : "boolean",
          "default" : false
        },
        "view_additional_documentation" : {
          "type" : "boolean",
          "default" : false
        },
        "start" : {
          "type" : "boolean",
          "default" : false
        },
        "send_last_email" : {
          "type" : "boolean",
          "default" : true
        },
        "derivation_screen_tpl" : {
          "type" : "string"
        },
        "selfservice_timeout" : {
          "type" : "integer"
        },
        "selfservice_time" : {
          "type" : "string"
        },
        "selfservice_time_unit" : {
          "type" : "string"
        },
        "selfservice_execution" : {
          "type" : "string"
        },
        "last_assigned_user_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "script" : {
          "type" : "string"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "Process_attributes" : {
      "required" : [ "design_access", "duration_by", "name", "status", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "Process_Title"
        },
        "description" : {
          "type" : "string",
          "example" : "Some description"
        },
        "parent_process_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b11"
        },
        "status" : {
          "type" : "string",
          "default" : "ACTIVE",
          "enum" : [ "ACTIVE", "INACTIVE", "DISABLED" ]
        },
        "duration_by" : {
          "type" : "string",
          "default" : "WORKING_DAYS",
          "enum" : [ "WORKING_DAYS", "CALENDAR_DAYS" ]
        },
        "type" : {
          "type" : "string",
          "default" : "NORMAL",
          "enum" : [ "NORMAL", "SUB_PROCESS" ]
        },
        "assignment" : {
          "type" : "boolean",
          "default" : false
        },
        "design_access" : {
          "type" : "string",
          "default" : "PUBLIC",
          "enum" : [ "PUBLIC", "PRIVATE" ]
        },
        "show_map" : {
          "type" : "boolean",
          "default" : true
        },
        "show_message" : {
          "type" : "boolean",
          "default" : true
        },
        "show_delegate" : {
          "type" : "boolean",
          "default" : true
        },
        "show_dynaform" : {
          "type" : "boolean",
          "default" : false
        },
        "category_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b22"
        },
        "sub_category_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b33"
        },
        "create_user_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b44"
        },
        "debug" : {
          "type" : "boolean",
          "default" : false
        },
        "dynaform_summary_id" : {
          "type" : "string",
          "example" : "9d705617-cc29-482a-85ff-7f7292f72b55"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "Group_attributes" : {
      "required" : [ "code", "title" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "example" : "GROUP_ADMIN"
        },
        "title" : {
          "type" : "string",
          "example" : "Group_Title"
        },
        "description" : {
          "type" : "string",
          "example" : "Some description"
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE",
          "default" : "ACTIVE",
          "enum" : [ "ACTIVE", "INACTIVE" ]
        },
        "users" : {
          "type" : "array",
          "description" : "User ID's array",
          "items" : {
            "type" : "string",
            "example" : "9d705617-cc29-482a-85ff-7f7292f72b31"
          }
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        }
      }
    },
    "ResultSuccess_meta" : {
      "required" : [ "code" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "example" : "1234",
          "description" : "Result code from ApiCodes dictionary"
        },
        "title" : {
          "type" : "string",
          "example" : "Some positive result description",
          "description" : "Result textual explanation"
        }
      }
    },
    "User_attributes" : {
      "required" : [ "email", "firstname", "lastname", "password", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "example" : "user_name"
        },
        "password" : {
          "type" : "string",
          "example" : "some_password"
        },
        "firstname" : {
          "type" : "string",
          "example" : "First_name"
        },
        "lastname" : {
          "type" : "string",
          "example" : "Last_name"
        },
        "email" : {
          "type" : "string",
          "example" : "example@example.com"
        },
        "expires_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "status" : {
          "type" : "string",
          "example" : "ACTIVE",
          "default" : "ACTIVE",
          "enum" : [ "ACTIVE", "INACTIVE", "VACATION", "CLOSED" ]
        },
        "country" : {
          "type" : "string",
          "example" : "USA"
        },
        "city" : {
          "type" : "string",
          "example" : "Washington"
        },
        "location" : {
          "type" : "string",
          "example" : "Location"
        },
        "address" : {
          "type" : "string",
          "example" : "USA"
        },
        "phone" : {
          "type" : "string",
          "example" : "+1(99)999-99-99"
        },
        "fax" : {
          "type" : "string",
          "example" : "+1(99)999-99-99"
        },
        "cellular" : {
          "type" : "string",
          "example" : "+1(99)999-99-99"
        },
        "zip_code" : {
          "type" : "string"
        },
        "position" : {
          "type" : "string"
        },
        "resume" : {
          "type" : "string"
        },
        "birthday_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "bookmark_start_cases" : {
          "type" : "string"
        },
        "time_zone" : {
          "type" : "string"
        },
        "default_lang" : {
          "type" : "string",
          "default" : "en_US"
        },
        "created_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "updated_at" : {
          "type" : "string",
          "example" : "2017-01-01T00:00:00+00:00"
        },
        "clients" : {
          "type" : "array",
          "items" : {
            "type" : "integer"
          }
        }
      }
    },
    "Pagination_links" : {
      "properties" : {
        "next" : {
          "type" : "string",
          "example" : "http://localhost/api/v1/groups?page=3"
        },
        "previous" : {
          "type" : "string",
          "example" : "http://localhost/api/v1/groups?page=1"
        }
      }
    }
  },
  "securityRequirement" : [ {
    "PasswordGrant" : [ ]
  } ]
}